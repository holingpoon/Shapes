<?xml version="1.0" encoding="UTF-8"?>
<crap_result>
  <project/>
  <timestamp>2015-01-02 20:05:18</timestamp>
  <stats>
    <name>Method Crap Stats</name>
    <methodCount>219</methodCount>
    <crapMethodCount>10</crapMethodCount>
    <crapLoad>106</crapLoad>
    <totalCrap>1945.72</totalCrap>
    <crapMethodPercent>4.57</crapMethodPercent>
  </stats>
  <methods>
    <method>
      <package/>
      <className>Shape</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct()</methodSignature>
      <fullMethod>__construct()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Shape</className>
      <methodName>__destruct</methodName>
      <methodSignature>__destruct()</methodSignature>
      <fullMethod>__destruct()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Shape</className>
      <methodName>getArea</methodName>
      <methodSignature>getArea()</methodSignature>
      <fullMethod>getArea()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Shape</className>
      <methodName>getPerimeter</methodName>
      <methodSignature>getPerimeter()</methodSignature>
      <fullMethod>getPerimeter()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Triangle</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($base = 0.0, $height = 0.0)</methodSignature>
      <fullMethod>__construct($base = 0.0, $height = 0.0)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Triangle</className>
      <methodName>__destruct</methodName>
      <methodSignature>__destruct()</methodSignature>
      <fullMethod>__destruct()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Triangle</className>
      <methodName>setArea</methodName>
      <methodSignature>setArea($base, $height)</methodSignature>
      <fullMethod>setArea($base, $height)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Triangle</className>
      <methodName>setPerimeter</methodName>
      <methodSignature>setPerimeter($sideOne, $sideTwo, $sideThree)</methodSignature>
      <fullMethod>setPerimeter($sideOne, $sideTwo, $sideThree)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>mock</methodName>
      <methodSignature>mock()</methodSignature>
      <fullMethod>mock()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>spy</methodName>
      <methodSignature>spy()</methodSignature>
      <fullMethod>spy()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>instanceMock</methodName>
      <methodSignature>instanceMock()</methodSignature>
      <fullMethod>instanceMock()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>namedMock</methodName>
      <methodSignature>namedMock()</methodSignature>
      <fullMethod>namedMock()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>self</methodName>
      <methodSignature>self()</methodSignature>
      <fullMethod>self()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>close</methodName>
      <methodSignature>close()</methodSignature>
      <fullMethod>close()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>fetchMock</methodName>
      <methodSignature>fetchMock($name)</methodSignature>
      <fullMethod>fetchMock($name)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>getContainer</methodName>
      <methodSignature>getContainer()</methodSignature>
      <fullMethod>getContainer()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>setGenerator</methodName>
      <methodSignature>setGenerator(Generator $generator)</methodSignature>
      <fullMethod>setGenerator(Generator $generator)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>getGenerator</methodName>
      <methodSignature>getGenerator()</methodSignature>
      <fullMethod>getGenerator()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>getDefaultGenerator</methodName>
      <methodSignature>getDefaultGenerator()</methodSignature>
      <fullMethod>getDefaultGenerator()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>setLoader</methodName>
      <methodSignature>setLoader(Loader $loader)</methodSignature>
      <fullMethod>setLoader(Loader $loader)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>getLoader</methodName>
      <methodSignature>getLoader()</methodSignature>
      <fullMethod>getLoader()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>getDefaultLoader</methodName>
      <methodSignature>getDefaultLoader()</methodSignature>
      <fullMethod>getDefaultLoader()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>setContainer</methodName>
      <methodSignature>setContainer(Mockery\Container $container)</methodSignature>
      <fullMethod>setContainer(Mockery\Container $container)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>resetContainer</methodName>
      <methodSignature>resetContainer()</methodSignature>
      <fullMethod>resetContainer()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>any</methodName>
      <methodSignature>any()</methodSignature>
      <fullMethod>any()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>type</methodName>
      <methodSignature>type($expected)</methodSignature>
      <fullMethod>type($expected)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>ducktype</methodName>
      <methodSignature>ducktype()</methodSignature>
      <fullMethod>ducktype()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>subset</methodName>
      <methodSignature>subset(array $part)</methodSignature>
      <fullMethod>subset(array $part)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>contains</methodName>
      <methodSignature>contains()</methodSignature>
      <fullMethod>contains()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>hasKey</methodName>
      <methodSignature>hasKey($key)</methodSignature>
      <fullMethod>hasKey($key)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>hasValue</methodName>
      <methodSignature>hasValue($val)</methodSignature>
      <fullMethod>hasValue($val)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>on</methodName>
      <methodSignature>on($closure)</methodSignature>
      <fullMethod>on($closure)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>mustBe</methodName>
      <methodSignature>mustBe($expected)</methodSignature>
      <fullMethod>mustBe($expected)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>not</methodName>
      <methodSignature>not($expected)</methodSignature>
      <fullMethod>not($expected)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>anyOf</methodName>
      <methodSignature>anyOf()</methodSignature>
      <fullMethod>anyOf()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>notAnyOf</methodName>
      <methodSignature>notAnyOf()</methodSignature>
      <fullMethod>notAnyOf()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>getConfiguration</methodName>
      <methodSignature>getConfiguration()</methodSignature>
      <fullMethod>getConfiguration()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>formatArgs</methodName>
      <methodSignature>formatArgs($method, array $arguments = null)</methodSignature>
      <fullMethod>formatArgs($method, array $arguments = null)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>formatArgument</methodName>
      <methodSignature>formatArgument($argument, $depth = 0)</methodSignature>
      <fullMethod>formatArgument($argument, $depth = 0)</fullMethod>
      <crap>156</crap>
      <complexity>12</complexity>
      <coverage>0</coverage>
      <crapLoad>12</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>formatObjects</methodName>
      <methodSignature>formatObjects(array $objects = null)</methodSignature>
      <fullMethod>formatObjects(array $objects = null)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>objectToArray</methodName>
      <methodSignature>objectToArray($object, $nesting = 3)</methodSignature>
      <fullMethod>objectToArray($object, $nesting = 3)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>extractInstancePublicProperties</methodName>
      <methodSignature>extractInstancePublicProperties($object, $nesting)</methodSignature>
      <fullMethod>extractInstancePublicProperties($object, $nesting)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>extractGetters</methodName>
      <methodSignature>extractGetters($object, $nesting)</methodSignature>
      <fullMethod>extractGetters($object, $nesting)</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>cleanupNesting</methodName>
      <methodSignature>cleanupNesting($argument, $nesting)</methodSignature>
      <fullMethod>cleanupNesting($argument, $nesting)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>cleanupArray</methodName>
      <methodSignature>cleanupArray($argument, $nesting = 3)</methodSignature>
      <fullMethod>cleanupArray($argument, $nesting = 3)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>parseShouldReturnArgs</methodName>
      <methodSignature>parseShouldReturnArgs(\Mockery\MockInterface $mock, $args, $add)</methodSignature>
      <fullMethod>parseShouldReturnArgs(\Mockery\MockInterface $mock, $args, $add)</fullMethod>
      <crap>5.73</crap>
      <complexity>5</complexity>
      <coverage>69.23</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>buildDemeterChain</methodName>
      <methodSignature>buildDemeterChain(\Mockery\MockInterface $mock, $arg, $add)</methodSignature>
      <fullMethod>buildDemeterChain(\Mockery\MockInterface $mock, $arg, $add)</fullMethod>
      <crap>13.12</crap>
      <complexity>9</complexity>
      <coverage>62.96</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function ($n) use ($mock)</methodSignature>
      <fullMethod>anonymous function ($n) use ($mock)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>getNewDemeterMock</methodName>
      <methodSignature>getNewDemeterMock(Mockery\Container $container,
        $method,
        Mockery\ExpectationInterface $exp
    )</methodSignature>
      <fullMethod>getNewDemeterMock(Mockery\Container $container,
        $method,
        Mockery\ExpectationInterface $exp
    )</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>getExistingDemeterMock</methodName>
      <methodSignature>getExistingDemeterMock(Mockery\Container $container, $demeterMockKey)</methodSignature>
      <fullMethod>getExistingDemeterMock(Mockery\Container $container, $demeterMockKey)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Mockery</className>
      <methodName>noMoreElementsInChain</methodName>
      <methodSignature>noMoreElementsInChain(array $methodNames)</methodSignature>
      <fullMethod>noMoreElementsInChain(array $methodNames)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>CompositeExpectation</className>
      <methodName>add</methodName>
      <methodSignature>add($expectation)</methodSignature>
      <fullMethod>add($expectation)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>CompositeExpectation</className>
      <methodName>andReturn</methodName>
      <methodSignature>andReturn()</methodSignature>
      <fullMethod>andReturn()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>CompositeExpectation</className>
      <methodName>__call</methodName>
      <methodSignature>__call($method, array $args)</methodSignature>
      <fullMethod>__call($method, array $args)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>CompositeExpectation</className>
      <methodName>getOrderNumber</methodName>
      <methodSignature>getOrderNumber()</methodSignature>
      <fullMethod>getOrderNumber()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>CompositeExpectation</className>
      <methodName>getMock</methodName>
      <methodSignature>getMock()</methodSignature>
      <fullMethod>getMock()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>CompositeExpectation</className>
      <methodName>mock</methodName>
      <methodSignature>mock()</methodSignature>
      <fullMethod>mock()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>CompositeExpectation</className>
      <methodName>shouldReceive</methodName>
      <methodSignature>shouldReceive()</methodSignature>
      <fullMethod>shouldReceive()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>CompositeExpectation</className>
      <methodName>__toString</methodName>
      <methodSignature>__toString()</methodSignature>
      <fullMethod>__toString()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Configuration</className>
      <methodName>allowMockingNonExistentMethods</methodName>
      <methodSignature>allowMockingNonExistentMethods($flag = true)</methodSignature>
      <fullMethod>allowMockingNonExistentMethods($flag = true)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Configuration</className>
      <methodName>mockingNonExistentMethodsAllowed</methodName>
      <methodSignature>mockingNonExistentMethodsAllowed()</methodSignature>
      <fullMethod>mockingNonExistentMethodsAllowed()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Configuration</className>
      <methodName>allowMockingMethodsUnnecessarily</methodName>
      <methodSignature>allowMockingMethodsUnnecessarily($flag = true)</methodSignature>
      <fullMethod>allowMockingMethodsUnnecessarily($flag = true)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Configuration</className>
      <methodName>mockingMethodsUnnecessarilyAllowed</methodName>
      <methodSignature>mockingMethodsUnnecessarilyAllowed()</methodSignature>
      <fullMethod>mockingMethodsUnnecessarilyAllowed()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Configuration</className>
      <methodName>setInternalClassMethodParamMap</methodName>
      <methodSignature>setInternalClassMethodParamMap($class, $method, array $map)</methodSignature>
      <fullMethod>setInternalClassMethodParamMap($class, $method, array $map)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Configuration</className>
      <methodName>resetInternalClassMethodParamMaps</methodName>
      <methodSignature>resetInternalClassMethodParamMaps()</methodSignature>
      <fullMethod>resetInternalClassMethodParamMaps()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Configuration</className>
      <methodName>getInternalClassMethodParamMap</methodName>
      <methodSignature>getInternalClassMethodParamMap($class, $method)</methodSignature>
      <fullMethod>getInternalClassMethodParamMap($class, $method)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Configuration</className>
      <methodName>getInternalClassMethodParamMaps</methodName>
      <methodSignature>getInternalClassMethodParamMaps()</methodSignature>
      <fullMethod>getInternalClassMethodParamMaps()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Container</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(Generator $generator = null, LoaderInterface $loader = null)</methodSignature>
      <fullMethod>__construct(Generator $generator = null, LoaderInterface $loader = null)</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Container</className>
      <methodName>mock</methodName>
      <methodSignature>mock()</methodSignature>
      <fullMethod>mock()</fullMethod>
      <crap>431.18</crap>
      <complexity>38</complexity>
      <coverage>35.19</coverage>
      <crapLoad>26</crapLoad>
    </method>
    <method>
      <package/>
      <className>Container</className>
      <methodName>instanceMock</methodName>
      <methodSignature>instanceMock()</methodSignature>
      <fullMethod>instanceMock()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Container</className>
      <methodName>getLoader</methodName>
      <methodSignature>getLoader()</methodSignature>
      <fullMethod>getLoader()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Container</className>
      <methodName>getGenerator</methodName>
      <methodSignature>getGenerator()</methodSignature>
      <fullMethod>getGenerator()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Container</className>
      <methodName>getKeyOfDemeterMockFor</methodName>
      <methodSignature>getKeyOfDemeterMockFor($method)</methodSignature>
      <fullMethod>getKeyOfDemeterMockFor($method)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Container</className>
      <methodName>getMocks</methodName>
      <methodSignature>getMocks()</methodSignature>
      <fullMethod>getMocks()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Container</className>
      <methodName>mockery_teardown</methodName>
      <methodSignature>mockery_teardown()</methodSignature>
      <fullMethod>mockery_teardown()</fullMethod>
      <crap>2.26</crap>
      <complexity>2</complexity>
      <coverage>60</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Container</className>
      <methodName>mockery_verify</methodName>
      <methodSignature>mockery_verify()</methodSignature>
      <fullMethod>mockery_verify()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Container</className>
      <methodName>mockery_close</methodName>
      <methodSignature>mockery_close()</methodSignature>
      <fullMethod>mockery_close()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Container</className>
      <methodName>mockery_allocateOrder</methodName>
      <methodSignature>mockery_allocateOrder()</methodSignature>
      <fullMethod>mockery_allocateOrder()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Container</className>
      <methodName>mockery_setGroup</methodName>
      <methodSignature>mockery_setGroup($group, $order)</methodSignature>
      <fullMethod>mockery_setGroup($group, $order)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Container</className>
      <methodName>mockery_getGroups</methodName>
      <methodSignature>mockery_getGroups()</methodSignature>
      <fullMethod>mockery_getGroups()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Container</className>
      <methodName>mockery_setCurrentOrder</methodName>
      <methodSignature>mockery_setCurrentOrder($order)</methodSignature>
      <fullMethod>mockery_setCurrentOrder($order)</fullMethod>
      <crap>1.12</crap>
      <complexity>1</complexity>
      <coverage>50</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Container</className>
      <methodName>mockery_getCurrentOrder</methodName>
      <methodSignature>mockery_getCurrentOrder()</methodSignature>
      <fullMethod>mockery_getCurrentOrder()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Container</className>
      <methodName>mockery_validateOrder</methodName>
      <methodSignature>mockery_validateOrder($method, $order, \Mockery\MockInterface $mock)</methodSignature>
      <fullMethod>mockery_validateOrder($method, $order, \Mockery\MockInterface $mock)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Container</className>
      <methodName>mockery_getExpectationCount</methodName>
      <methodSignature>mockery_getExpectationCount()</methodSignature>
      <fullMethod>mockery_getExpectationCount()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Container</className>
      <methodName>rememberMock</methodName>
      <methodSignature>rememberMock(\Mockery\MockInterface $mock)</methodSignature>
      <fullMethod>rememberMock(\Mockery\MockInterface $mock)</fullMethod>
      <crap>2.03</crap>
      <complexity>2</complexity>
      <coverage>80</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Container</className>
      <methodName>self</methodName>
      <methodSignature>self()</methodSignature>
      <fullMethod>self()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Container</className>
      <methodName>fetchMock</methodName>
      <methodSignature>fetchMock($reference)</methodSignature>
      <fullMethod>fetchMock($reference)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Container</className>
      <methodName>_getInstance</methodName>
      <methodSignature>_getInstance($mockName, $constructorArgs = null)</methodSignature>
      <fullMethod>_getInstance($mockName, $constructorArgs = null)</fullMethod>
      <crap>89.77</crap>
      <complexity>11</complexity>
      <coverage>13.33</coverage>
      <crapLoad>10</crapLoad>
    </method>
    <method>
      <package/>
      <className>Container</className>
      <methodName>declareClass</methodName>
      <methodSignature>declareClass($fqcn)</methodSignature>
      <fullMethod>declareClass($fqcn)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Container</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function ($part)</methodSignature>
      <fullMethod>anonymous function ($part)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Container</className>
      <methodName>checkForNamedMockClashes</methodName>
      <methodSignature>checkForNamedMockClashes($config)</methodSignature>
      <fullMethod>checkForNamedMockClashes($config)</fullMethod>
      <crap>10.75</crap>
      <complexity>4</complexity>
      <coverage>25</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(\Mockery\MockInterface $mock, $name)</methodSignature>
      <fullMethod>__construct(\Mockery\MockInterface $mock, $name)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>__toString</methodName>
      <methodSignature>__toString()</methodSignature>
      <fullMethod>__toString()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>verifyCall</methodName>
      <methodSignature>verifyCall(array $args)</methodSignature>
      <fullMethod>verifyCall(array $args)</fullMethod>
      <crap>4.18</crap>
      <complexity>4</complexity>
      <coverage>77.78</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>_setValues</methodName>
      <methodSignature>_setValues()</methodSignature>
      <fullMethod>_setValues()</fullMethod>
      <crap>4.68</crap>
      <complexity>3</complexity>
      <coverage>42.86</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>_getReturnValue</methodName>
      <methodSignature>_getReturnValue(array $args)</methodSignature>
      <fullMethod>_getReturnValue(array $args)</fullMethod>
      <crap>7.19</crap>
      <complexity>5</complexity>
      <coverage>55.56</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>isEligible</methodName>
      <methodSignature>isEligible()</methodSignature>
      <fullMethod>isEligible()</fullMethod>
      <crap>3.58</crap>
      <complexity>3</complexity>
      <coverage>60</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>isCallCountConstrained</methodName>
      <methodSignature>isCallCountConstrained()</methodSignature>
      <fullMethod>isCallCountConstrained()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>validateOrder</methodName>
      <methodSignature>validateOrder()</methodSignature>
      <fullMethod>validateOrder()</fullMethod>
      <crap>5.2</crap>
      <complexity>3</complexity>
      <coverage>37.5</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>verify</methodName>
      <methodSignature>verify()</methodSignature>
      <fullMethod>verify()</fullMethod>
      <crap>2.06</crap>
      <complexity>2</complexity>
      <coverage>75</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>matchArgs</methodName>
      <methodSignature>matchArgs(array $args)</methodSignature>
      <fullMethod>matchArgs(array $args)</fullMethod>
      <crap>25.72</crap>
      <complexity>6</complexity>
      <coverage>18.18</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>_matchArg</methodName>
      <methodSignature>_matchArg($expected, &amp;$actual)</methodSignature>
      <fullMethod>_matchArg($expected, &amp;$actual)</fullMethod>
      <crap>240</crap>
      <complexity>15</complexity>
      <coverage>0</coverage>
      <crapLoad>16</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function ()</methodSignature>
      <fullMethod>anonymous function ()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>with</methodName>
      <methodSignature>with()</methodSignature>
      <fullMethod>with()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>withArgs</methodName>
      <methodSignature>withArgs(array $args)</methodSignature>
      <fullMethod>withArgs(array $args)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>withNoArgs</methodName>
      <methodSignature>withNoArgs()</methodSignature>
      <fullMethod>withNoArgs()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>withAnyArgs</methodName>
      <methodSignature>withAnyArgs()</methodSignature>
      <fullMethod>withAnyArgs()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>andReturn</methodName>
      <methodSignature>andReturn()</methodSignature>
      <fullMethod>andReturn()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>andReturnSelf</methodName>
      <methodSignature>andReturnSelf()</methodSignature>
      <fullMethod>andReturnSelf()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>andReturnValues</methodName>
      <methodSignature>andReturnValues(array $values)</methodSignature>
      <fullMethod>andReturnValues(array $values)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>andReturnUsing</methodName>
      <methodSignature>andReturnUsing()</methodSignature>
      <fullMethod>andReturnUsing()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>andReturnUndefined</methodName>
      <methodSignature>andReturnUndefined()</methodSignature>
      <fullMethod>andReturnUndefined()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>andReturnNull</methodName>
      <methodSignature>andReturnNull()</methodSignature>
      <fullMethod>andReturnNull()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>andThrow</methodName>
      <methodSignature>andThrow($exception, $message = '', $code = 0, \Exception $previous = null)</methodSignature>
      <fullMethod>andThrow($exception, $message = '', $code = 0, \Exception $previous = null)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>andThrowExceptions</methodName>
      <methodSignature>andThrowExceptions(array $exceptions)</methodSignature>
      <fullMethod>andThrowExceptions(array $exceptions)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>andSet</methodName>
      <methodSignature>andSet($name, $value)</methodSignature>
      <fullMethod>andSet($name, $value)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>set</methodName>
      <methodSignature>set($name, $value)</methodSignature>
      <fullMethod>set($name, $value)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>zeroOrMoreTimes</methodName>
      <methodSignature>zeroOrMoreTimes()</methodSignature>
      <fullMethod>zeroOrMoreTimes()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>times</methodName>
      <methodSignature>times($limit = null)</methodSignature>
      <fullMethod>times($limit = null)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>never</methodName>
      <methodSignature>never()</methodSignature>
      <fullMethod>never()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>once</methodName>
      <methodSignature>once()</methodSignature>
      <fullMethod>once()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>twice</methodName>
      <methodSignature>twice()</methodSignature>
      <fullMethod>twice()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>atLeast</methodName>
      <methodSignature>atLeast()</methodSignature>
      <fullMethod>atLeast()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>atMost</methodName>
      <methodSignature>atMost()</methodSignature>
      <fullMethod>atMost()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>between</methodName>
      <methodSignature>between($minimum, $maximum)</methodSignature>
      <fullMethod>between($minimum, $maximum)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>ordered</methodName>
      <methodSignature>ordered($group = null)</methodSignature>
      <fullMethod>ordered($group = null)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>globally</methodName>
      <methodSignature>globally()</methodSignature>
      <fullMethod>globally()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>_defineOrdered</methodName>
      <methodSignature>_defineOrdered($group, $ordering)</methodSignature>
      <fullMethod>_defineOrdered($group, $ordering)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>getOrderNumber</methodName>
      <methodSignature>getOrderNumber()</methodSignature>
      <fullMethod>getOrderNumber()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>byDefault</methodName>
      <methodSignature>byDefault()</methodSignature>
      <fullMethod>byDefault()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>getMock</methodName>
      <methodSignature>getMock()</methodSignature>
      <fullMethod>getMock()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>passthru</methodName>
      <methodSignature>passthru()</methodSignature>
      <fullMethod>passthru()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>__clone</methodName>
      <methodSignature>__clone()</methodSignature>
      <fullMethod>__clone()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Expectation</className>
      <methodName>getName</methodName>
      <methodSignature>getName()</methodSignature>
      <fullMethod>getName()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ExpectationDirector</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($name, \Mockery\MockInterface $mock)</methodSignature>
      <fullMethod>__construct($name, \Mockery\MockInterface $mock)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ExpectationDirector</className>
      <methodName>addExpectation</methodName>
      <methodSignature>addExpectation(\Mockery\Expectation $expectation)</methodSignature>
      <fullMethod>addExpectation(\Mockery\Expectation $expectation)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ExpectationDirector</className>
      <methodName>call</methodName>
      <methodSignature>call(array $args)</methodSignature>
      <fullMethod>call(array $args)</fullMethod>
      <crap>4.05</crap>
      <complexity>2</complexity>
      <coverage>20</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ExpectationDirector</className>
      <methodName>verify</methodName>
      <methodSignature>verify()</methodSignature>
      <fullMethod>verify()</fullMethod>
      <crap>4.59</crap>
      <complexity>4</complexity>
      <coverage>66.67</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ExpectationDirector</className>
      <methodName>findExpectation</methodName>
      <methodSignature>findExpectation(array $args)</methodSignature>
      <fullMethod>findExpectation(array $args)</fullMethod>
      <crap>2.15</crap>
      <complexity>2</complexity>
      <coverage>66.67</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ExpectationDirector</className>
      <methodName>makeExpectationDefault</methodName>
      <methodSignature>makeExpectationDefault(\Mockery\Expectation $expectation)</methodSignature>
      <fullMethod>makeExpectationDefault(\Mockery\Expectation $expectation)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ExpectationDirector</className>
      <methodName>_findExpectationIn</methodName>
      <methodSignature>_findExpectationIn(array $expectations, array $args)</methodSignature>
      <fullMethod>_findExpectationIn(array $expectations, array $args)</fullMethod>
      <crap>16.67</crap>
      <complexity>6</complexity>
      <coverage>33.33</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ExpectationDirector</className>
      <methodName>getExpectations</methodName>
      <methodSignature>getExpectations()</methodSignature>
      <fullMethod>getExpectations()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ExpectationDirector</className>
      <methodName>getExpectationCount</methodName>
      <methodSignature>getExpectationCount()</methodSignature>
      <fullMethod>getExpectationCount()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>CachingGenerator</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(Generator $generator)</methodSignature>
      <fullMethod>__construct(Generator $generator)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>CachingGenerator</className>
      <methodName>generate</methodName>
      <methodSignature>generate(MockConfiguration $config)</methodSignature>
      <fullMethod>generate(MockConfiguration $config)</fullMethod>
      <crap>2.02</crap>
      <complexity>2</complexity>
      <coverage>83.33</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfiguration</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(array $targets = array(), array $blackListedMethods = array(), array $whiteListedMethods = array(), $name = null, $instanceMock = false, array $parameterOverrides = array())</methodSignature>
      <fullMethod>__construct(array $targets = array(), array $blackListedMethods = array(), array $whiteListedMethods = array(), $name = null, $instanceMock = false, array $parameterOverrides = array())</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfiguration</className>
      <methodName>getHash</methodName>
      <methodSignature>getHash()</methodSignature>
      <fullMethod>getHash()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfiguration</className>
      <methodName>getMethodsToMock</methodName>
      <methodSignature>getMethodsToMock()</methodSignature>
      <fullMethod>getMethodsToMock()</fullMethod>
      <crap>17.86</crap>
      <complexity>9</complexity>
      <coverage>52.17</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfiguration</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function ($method) use (&amp;$names)</methodSignature>
      <fullMethod>anonymous function ($method) use (&amp;$names)</fullMethod>
      <crap>4.05</crap>
      <complexity>2</complexity>
      <coverage>20</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfiguration</className>
      <methodName>requiresCallTypeHintRemoval</methodName>
      <methodSignature>requiresCallTypeHintRemoval()</methodSignature>
      <fullMethod>requiresCallTypeHintRemoval()</fullMethod>
      <crap>4.12</crap>
      <complexity>3</complexity>
      <coverage>50</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfiguration</className>
      <methodName>requiresCallStaticTypeHintRemoval</methodName>
      <methodSignature>requiresCallStaticTypeHintRemoval()</methodSignature>
      <fullMethod>requiresCallStaticTypeHintRemoval()</fullMethod>
      <crap>4.12</crap>
      <complexity>3</complexity>
      <coverage>50</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfiguration</className>
      <methodName>rename</methodName>
      <methodSignature>rename($className)</methodSignature>
      <fullMethod>rename($className)</fullMethod>
      <crap>4.18</crap>
      <complexity>4</complexity>
      <coverage>77.78</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfiguration</className>
      <methodName>addTarget</methodName>
      <methodSignature>addTarget($target)</methodSignature>
      <fullMethod>addTarget($target)</fullMethod>
      <crap>10.5</crap>
      <complexity>6</complexity>
      <coverage>50</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfiguration</className>
      <methodName>addTargets</methodName>
      <methodSignature>addTargets($interfaces)</methodSignature>
      <fullMethod>addTargets($interfaces)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfiguration</className>
      <methodName>getTargetClassName</methodName>
      <methodSignature>getTargetClassName()</methodSignature>
      <fullMethod>getTargetClassName()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfiguration</className>
      <methodName>getTargetClass</methodName>
      <methodSignature>getTargetClass()</methodSignature>
      <fullMethod>getTargetClass()</fullMethod>
      <crap>16.67</crap>
      <complexity>6</complexity>
      <coverage>33.33</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfiguration</className>
      <methodName>getTargetInterfaces</methodName>
      <methodSignature>getTargetInterfaces()</methodSignature>
      <fullMethod>getTargetInterfaces()</fullMethod>
      <crap>116.23</crap>
      <complexity>13</complexity>
      <coverage>15.15</coverage>
      <crapLoad>11</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfiguration</className>
      <methodName>getTargetObject</methodName>
      <methodSignature>getTargetObject()</methodSignature>
      <fullMethod>getTargetObject()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfiguration</className>
      <methodName>getName</methodName>
      <methodSignature>getName()</methodSignature>
      <fullMethod>getName()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfiguration</className>
      <methodName>generateName</methodName>
      <methodSignature>generateName()</methodSignature>
      <fullMethod>generateName()</fullMethod>
      <crap>5.57</crap>
      <complexity>4</complexity>
      <coverage>53.85</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfiguration</className>
      <methodName>getShortName</methodName>
      <methodSignature>getShortName()</methodSignature>
      <fullMethod>getShortName()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfiguration</className>
      <methodName>getNamespaceName</methodName>
      <methodSignature>getNamespaceName()</methodSignature>
      <fullMethod>getNamespaceName()</fullMethod>
      <crap>2.03</crap>
      <complexity>2</complexity>
      <coverage>80</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfiguration</className>
      <methodName>getBlackListedMethods</methodName>
      <methodSignature>getBlackListedMethods()</methodSignature>
      <fullMethod>getBlackListedMethods()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfiguration</className>
      <methodName>getWhiteListedMethods</methodName>
      <methodSignature>getWhiteListedMethods()</methodSignature>
      <fullMethod>getWhiteListedMethods()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfiguration</className>
      <methodName>isInstanceMock</methodName>
      <methodSignature>isInstanceMock()</methodSignature>
      <fullMethod>isInstanceMock()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfiguration</className>
      <methodName>getParameterOverrides</methodName>
      <methodSignature>getParameterOverrides()</methodSignature>
      <fullMethod>getParameterOverrides()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfiguration</className>
      <methodName>setTargetClassName</methodName>
      <methodSignature>setTargetClassName($targetClassName)</methodSignature>
      <fullMethod>setTargetClassName($targetClassName)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfiguration</className>
      <methodName>getAllMethods</methodName>
      <methodSignature>getAllMethods()</methodSignature>
      <fullMethod>getAllMethods()</fullMethod>
      <crap>5.02</crap>
      <complexity>5</complexity>
      <coverage>90.91</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfiguration</className>
      <methodName>addTargetInterfaceName</methodName>
      <methodSignature>addTargetInterfaceName($targetInterface)</methodSignature>
      <fullMethod>addTargetInterfaceName($targetInterface)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfiguration</className>
      <methodName>setTargetObject</methodName>
      <methodSignature>setTargetObject($object)</methodSignature>
      <fullMethod>setTargetObject($object)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfigurationBuilder</className>
      <methodName>addTarget</methodName>
      <methodSignature>addTarget($target)</methodSignature>
      <fullMethod>addTarget($target)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfigurationBuilder</className>
      <methodName>addTargets</methodName>
      <methodSignature>addTargets($targets)</methodSignature>
      <fullMethod>addTargets($targets)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfigurationBuilder</className>
      <methodName>setName</methodName>
      <methodSignature>setName($name)</methodSignature>
      <fullMethod>setName($name)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfigurationBuilder</className>
      <methodName>addBlackListedMethod</methodName>
      <methodSignature>addBlackListedMethod($blackListedMethod)</methodSignature>
      <fullMethod>addBlackListedMethod($blackListedMethod)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfigurationBuilder</className>
      <methodName>addBlackListedMethods</methodName>
      <methodSignature>addBlackListedMethods(array $blackListedMethods)</methodSignature>
      <fullMethod>addBlackListedMethods(array $blackListedMethods)</fullMethod>
      <crap>2.06</crap>
      <complexity>2</complexity>
      <coverage>75</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfigurationBuilder</className>
      <methodName>setBlackListedMethods</methodName>
      <methodSignature>setBlackListedMethods(array $blackListedMethods)</methodSignature>
      <fullMethod>setBlackListedMethods(array $blackListedMethods)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfigurationBuilder</className>
      <methodName>addWhiteListedMethod</methodName>
      <methodSignature>addWhiteListedMethod($whiteListedMethod)</methodSignature>
      <fullMethod>addWhiteListedMethod($whiteListedMethod)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfigurationBuilder</className>
      <methodName>addWhiteListedMethods</methodName>
      <methodSignature>addWhiteListedMethods(array $whiteListedMethods)</methodSignature>
      <fullMethod>addWhiteListedMethods(array $whiteListedMethods)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfigurationBuilder</className>
      <methodName>setWhiteListedMethods</methodName>
      <methodSignature>setWhiteListedMethods(array $whiteListedMethods)</methodSignature>
      <fullMethod>setWhiteListedMethods(array $whiteListedMethods)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfigurationBuilder</className>
      <methodName>setInstanceMock</methodName>
      <methodSignature>setInstanceMock($instanceMock)</methodSignature>
      <fullMethod>setInstanceMock($instanceMock)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfigurationBuilder</className>
      <methodName>setParameterOverrides</methodName>
      <methodSignature>setParameterOverrides(array $overrides)</methodSignature>
      <fullMethod>setParameterOverrides(array $overrides)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockConfigurationBuilder</className>
      <methodName>getMockConfiguration</methodName>
      <methodSignature>getMockConfiguration()</methodSignature>
      <fullMethod>getMockConfiguration()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockDefinition</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(MockConfiguration $config, $code)</methodSignature>
      <fullMethod>__construct(MockConfiguration $config, $code)</fullMethod>
      <crap>2.03</crap>
      <complexity>2</complexity>
      <coverage>80</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockDefinition</className>
      <methodName>getConfig</methodName>
      <methodSignature>getConfig()</methodSignature>
      <fullMethod>getConfig()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockDefinition</className>
      <methodName>getClassName</methodName>
      <methodSignature>getClassName()</methodSignature>
      <fullMethod>getClassName()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MockDefinition</className>
      <methodName>getCode</methodName>
      <methodSignature>getCode()</methodSignature>
      <fullMethod>getCode()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>CallTypeHintPass</className>
      <methodName>apply</methodName>
      <methodSignature>apply($code, MockConfiguration $config)</methodSignature>
      <fullMethod>apply($code, MockConfiguration $config)</fullMethod>
      <crap>7.1</crap>
      <complexity>3</complexity>
      <coverage>23.08</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ClassNamePass</className>
      <methodName>apply</methodName>
      <methodSignature>apply($code, MockConfiguration $config)</methodSignature>
      <fullMethod>apply($code, MockConfiguration $config)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ClassPass</className>
      <methodName>apply</methodName>
      <methodSignature>apply($code, MockConfiguration $config)</methodSignature>
      <fullMethod>apply($code, MockConfiguration $config)</fullMethod>
      <crap>5.17</crap>
      <complexity>5</complexity>
      <coverage>80.95</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>InstanceMockPass</className>
      <methodName>apply</methodName>
      <methodSignature>apply($code, MockConfiguration $config)</methodSignature>
      <fullMethod>apply($code, MockConfiguration $config)</fullMethod>
      <crap>2.5</crap>
      <complexity>2</complexity>
      <coverage>50</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>InstanceMockPass</className>
      <methodName>appendToClass</methodName>
      <methodSignature>appendToClass($class, $code)</methodSignature>
      <fullMethod>appendToClass($class, $code)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>InterfacePass</className>
      <methodName>apply</methodName>
      <methodSignature>apply($code, MockConfiguration $config)</methodSignature>
      <fullMethod>apply($code, MockConfiguration $config)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>InterfacePass</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function ($code, $i)</methodSignature>
      <fullMethod>anonymous function ($code, $i)</fullMethod>
      <crap>1.12</crap>
      <complexity>1</complexity>
      <coverage>50</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MethodDefinitionPass</className>
      <methodName>apply</methodName>
      <methodSignature>apply($code, MockConfiguration $config)</methodSignature>
      <fullMethod>apply($code, MockConfiguration $config)</fullMethod>
      <crap>26.83</crap>
      <complexity>6</complexity>
      <coverage>16.67</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MethodDefinitionPass</className>
      <methodName>renderParams</methodName>
      <methodSignature>renderParams(Method $method, $config)</methodSignature>
      <fullMethod>renderParams(Method $method, $config)</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package/>
      <className>MethodDefinitionPass</className>
      <methodName>appendToClass</methodName>
      <methodSignature>appendToClass($class, $code)</methodSignature>
      <fullMethod>appendToClass($class, $code)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MethodDefinitionPass</className>
      <methodName>renderMethodBody</methodName>
      <methodSignature>renderMethodBody($method, $config)</methodSignature>
      <fullMethod>renderMethodBody($method, $config)</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package/>
      <className>RemoveBuiltinMethodsThatAreFinalPass</className>
      <methodName>apply</methodName>
      <methodSignature>apply($code, MockConfiguration $config)</methodSignature>
      <fullMethod>apply($code, MockConfiguration $config)</fullMethod>
      <crap>7.19</crap>
      <complexity>5</complexity>
      <coverage>55.56</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>RemoveUnserializeForInternalSerializableClassesPass</className>
      <methodName>apply</methodName>
      <methodSignature>apply($code, MockConfiguration $config)</methodSignature>
      <fullMethod>apply($code, MockConfiguration $config)</fullMethod>
      <crap>5.26</crap>
      <complexity>4</complexity>
      <coverage>57.14</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>RemoveUnserializeForInternalSerializableClassesPass</className>
      <methodName>appendToClass</methodName>
      <methodSignature>appendToClass($class, $code)</methodSignature>
      <fullMethod>appendToClass($class, $code)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>StringManipulationGenerator</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(array $passes)</methodSignature>
      <fullMethod>__construct(array $passes)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>StringManipulationGenerator</className>
      <methodName>generate</methodName>
      <methodSignature>generate(MockConfiguration $config)</methodSignature>
      <fullMethod>generate(MockConfiguration $config)</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>StringManipulationGenerator</className>
      <methodName>addPass</methodName>
      <methodSignature>addPass(Pass $pass)</methodSignature>
      <fullMethod>addPass(Pass $pass)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>UndefinedTargetClass</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($name)</methodSignature>
      <fullMethod>__construct($name)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>UndefinedTargetClass</className>
      <methodName>getName</methodName>
      <methodSignature>getName()</methodSignature>
      <fullMethod>getName()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>UndefinedTargetClass</className>
      <methodName>isAbstract</methodName>
      <methodSignature>isAbstract()</methodSignature>
      <fullMethod>isAbstract()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>UndefinedTargetClass</className>
      <methodName>isFinal</methodName>
      <methodSignature>isFinal()</methodSignature>
      <fullMethod>isFinal()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>UndefinedTargetClass</className>
      <methodName>getMethods</methodName>
      <methodSignature>getMethods()</methodSignature>
      <fullMethod>getMethods()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>UndefinedTargetClass</className>
      <methodName>getNamespaceName</methodName>
      <methodSignature>getNamespaceName()</methodSignature>
      <fullMethod>getNamespaceName()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>UndefinedTargetClass</className>
      <methodName>inNamespace</methodName>
      <methodSignature>inNamespace()</methodSignature>
      <fullMethod>inNamespace()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>UndefinedTargetClass</className>
      <methodName>getShortName</methodName>
      <methodSignature>getShortName()</methodSignature>
      <fullMethod>getShortName()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>UndefinedTargetClass</className>
      <methodName>implementsInterface</methodName>
      <methodSignature>implementsInterface($interface)</methodSignature>
      <fullMethod>implementsInterface($interface)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>UndefinedTargetClass</className>
      <methodName>hasInternalAncestor</methodName>
      <methodSignature>hasInternalAncestor()</methodSignature>
      <fullMethod>hasInternalAncestor()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>EvalLoader</className>
      <methodName>load</methodName>
      <methodSignature>load(MockDefinition $definition)</methodSignature>
      <fullMethod>load(MockDefinition $definition)</fullMethod>
      <crap>2.06</crap>
      <complexity>2</complexity>
      <coverage>75</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MethodCall</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($method, $args)</methodSignature>
      <fullMethod>__construct($method, $args)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MethodCall</className>
      <methodName>getMethod</methodName>
      <methodSignature>getMethod()</methodSignature>
      <fullMethod>getMethod()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MethodCall</className>
      <methodName>getArgs</methodName>
      <methodSignature>getArgs()</methodSignature>
      <fullMethod>getArgs()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ReceivedMethodCalls</className>
      <methodName>push</methodName>
      <methodSignature>push(MethodCall $methodCall)</methodSignature>
      <fullMethod>push(MethodCall $methodCall)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ReceivedMethodCalls</className>
      <methodName>verify</methodName>
      <methodSignature>verify(Expectation $expectation)</methodSignature>
      <fullMethod>verify(Expectation $expectation)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
  </methods>
</crap_result>
